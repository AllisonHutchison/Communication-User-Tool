{"ast":null,"code":"var _jsxFileName = \"/Users/daniellesimon/Desktop/Communication-User-Tool/src/components/SkillSearch.js\";\nimport React, { Component } from 'react';\nimport Select from 'react-select';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = [{\n  value: 'automation_engineer',\n  label: 'Automation Engineer'\n}, {\n  value: 'computer_hardware_engineer',\n  label: 'Computer Hardware Engineer'\n}, {\n  value: 'data_analyst',\n  label: 'Data Analyst'\n}, {\n  value: 'data_engineer',\n  label: 'Data Engineer'\n}, {\n  value: 'data_scientist',\n  label: 'Data Scientist'\n}, {\n  value: 'electrical_engineer',\n  label: 'Electrical Engineer'\n}, {\n  value: 'financial_engineer',\n  label: 'Financial Engineer'\n}, {\n  value: 'machine_learning_engineer',\n  label: 'Machine Learning Engineer'\n}, {\n  value: 'mechanical_engineer',\n  label: 'Mechanical Engineer'\n}, {\n  value: 'network_engineer',\n  label: 'Network Engineer'\n}, {\n  value: 'qa_engineer',\n  label: 'QA Engineer'\n}, {\n  value: 'quantitative_analyst',\n  label: 'Quantitative Analyst'\n}, {\n  value: 'quantitative_finance',\n  label: 'Quantitative Finance'\n}, {\n  value: 'quantitative_research',\n  label: 'Quantitative Research'\n}, {\n  value: 'quantitative_trading',\n  label: 'Quantitative Trading'\n}, {\n  value: 'software_engineer',\n  label: 'Software Engineer'\n}, {\n  value: 'systems_engineer',\n  label: 'Systems Engineer'\n}, {\n  value: 'technology_analyst',\n  label: 'Technology Analyst'\n}];\nexport default class SkillSearch extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = selectedOption => {\n      this.setState({\n        selectedOption\n      });\n      console.log(this.state.selectedOption);\n    };\n\n    this.onClick = () => {\n      console.log(this.state.selectedOption);\n      this.setState({\n        fade: true\n      });\n      this.drawChart();\n    };\n\n    this.drawChart = () => {\n      // d3.json(this.state.data).then(data => {\n      // this.state.data.then(data => {\n      const size = 400; // const svg = d3.select('svg') ? d3.select(this.ref.current) : d3.select(this.ref.current).append('svg')\n      //     .class(\"graph\")\n      //     .attr('width', size).attr('height', size);\n\n      if (this.state.chartExists) {\n        console.log(\"exists\");\n        var svg = d3.select(this.ref.current);\n      } else {\n        console.log(\"does not exist\");\n        var svg = d3.select(this.ref.current).append('svg').attr(\"class\", \"graph\").attr('width', size).attr('height', size);\n      }\n\n      this.setState({\n        chartExists: true\n      }); // const rectWidth = 95\n      // svg.selectAll('rect')\n      //     .data(this.data)\n      //     .enter()\n      //     .append('rect')\n      //     .attr('x', (d, i) => 5 + i * (rectWidth + 5))\n      //     .attr('y', (d) => size - d)\n      //     .attr('width', rectWidth)\n      //     .attr('height', (d) => d)\n      //     .attr('fill', 'tomato')\n      // this.state.data.forEach(d => {\n      //     // d['points'] = Number(d['points']);\n      //     // d['price'] = Number(d['price'].replace(/,/g, \"\").replace(/\\$/g, \"\"));\n      //     console.log(d);\n      // });\n\n      const width = svg.attr(\"width\");\n      const height = svg.attr(\"height\");\n      const margin = {\n        top: 20,\n        right: 10,\n        bottom: 30,\n        left: 35\n      };\n      const chartWidth = width - margin.left - margin.right;\n      const chartHeight = height - margin.top - margin.bottom;\n      let annotations = svg.append(\"g\").attr(\"id\", \"annotations\");\n      let chartArea = svg.append(\"g\").attr(\"id\", \"chart\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n      var skills = [];\n      var frequency = [];\n\n      for (const [key, value] of Object.entries(this.state.data)) {\n        skills.push(key);\n        frequency.push(value);\n      } // console.log(occurences)\n\n\n      const skillExtent = d3.extent(skills);\n      console.log(skillExtent);\n      const frequencyExtent = d3.extent(frequency);\n      console.log(frequencyExtent);\n      let bottomAxis = d3.axisBottom();\n      let bottomAxisG = annotations.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", `translate(${margin.left},${chartHeight + margin.top + 10})`);\n      let leftAxis = d3.axisLeft();\n      let leftAxisG = annotations.append(\"g\").attr(\"class\", \"y axis\").attr(\"transform\", `translate(${margin.left - 10},${margin.top})`);\n\n      function updateBarsAnimated(yearKey) {\n        const data = yearData[yearKey];\n        console.log(data);\n        const genres = d3.map(data, d => d.genre);\n        const genreScale = d3.scaleBand().domain(genres).range([0, chartWidth]).padding(0.05);\n        bottomAxis.scale(genreScale);\n        bottomAxisG.transition().call(bottomAxis); // Because d3 reuses elements in a greedy fashion by default, there is no guarantee that the \"Action\" bar stays\n        //  the \"Action\" bar during the animated join because d3 may re-assign it to a different genre during update\n        // To make sure d3 re-uses bars, we can give .data() a second parameter that uniquely identifies each data value\n        // d3 will check that value and re-use objects if they share the same identifier\n        // Here we want d3 to keep bars mapped to the same genre if possible, so we add d => d.genre to the data() call\n\n        chartArea.selectAll('rect.bar').data(data, d => d.genre).join(enter => enter.append('rect').attr('class', 'bar').attr(\"fill\", \"steelblue\").attr(\"x\", d => genreScale(d.genre)).attr(\"y\", d => percentScale(d.percentpass)).attr(\"height\", d => percentScale(0) - percentScale(d.percentpass)).attr(\"width\", genreScale.bandwidth()).attr(\"opacity\", 0) // Set opacity low, then animate to 1 to make them fade in\n        .call(enter => enter.transition().attr('opacity', 1)), update => update.call(update => update.transition() // Animate resizing and movement\n        .attr(\"fill\", \"steelblue\").attr(\"x\", d => genreScale(d.genre)).attr(\"y\", d => percentScale(d.percentpass)).attr(\"height\", d => percentScale(0) - percentScale(d.percentpass)).attr(\"width\", genreScale.bandwidth())), exit => exit.call(exit => exit.transition().attr('opacity', 0).remove())); // Animate opacity to fade out\n      } // const frequencyScale = d3.scaleLinear().domain(frequencyExtent).range([chartHeight, 0]);\n      // let leftAxis = d3.axisLeft(frequencyScale).tickFormat(d3.format('.0%'));\n      // let leftGridlines = d3.axisLeft(frequencyScale)\n      //     .tickSize(-chartWidth - 10)\n      //     .tickFormat(\"\")\n      // annotations.append(\"g\")\n      //     .attr(\"class\", \"y axis\")\n      //     .attr(\"transform\", `translate(${margin.left - 10},${margin.top})`)\n      //     .call(leftAxis)\n      // annotations.append(\"g\")\n      //     .attr(\"class\", \"y gridlines\")\n      //     .attr(\"transform\", `translate(${margin.left - 10},${margin.top})`)\n      //     .call(leftGridlines);\n      // const skillScale = d3.scaleLinear().domain(skillExtent).range([chartHeight, 0]);\n      // let bottomAxis = d3.axisBottom(skillScale).tickFormat(d3.format('.0%'));\n      // let bottomGridlines = d3.axisBottom(skillScale)\n      //     .tickSize(-chartWidth - 10)\n      //     .tickFormat(\"\")\n      // annotations.append(\"g\")\n      //     .attr(\"class\", \"x axis\")\n      //     .attr(\"transform\", `translate(${margin.left},${chartHeight + margin.top + 10})`)\n      //     .call(bottomAxis)\n      // annotations.append(\"g\")\n      //     .attr(\"class\", \"x gridlines\")\n      //     .attr(\"transform\", `translate(${margin.left},${chartHeight + margin.top + 10})`)\n      //     .call(bottomGridlines);\n\n    };\n\n    this.state = {\n      selectedOption: null,\n      chartExists: false,\n      // fade: false\n      data: {\n        \"skill1\": 5,\n        \"skill2\": 8,\n        \"skill3\": 4,\n        \"skill4\": 1,\n        \"skill5\": 9\n      }\n    };\n    this.ref = /*#__PURE__*/React.createRef(); // this.data = [100, 200, 300, 400, 500]\n  }\n\n  render() {\n    // const fade = this.state.fade;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"skill-search-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"Search for jobs you're interested in!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"skill-search\",\n        children: [/*#__PURE__*/_jsxDEV(Select, {\n          className: \"searchbar\",\n          options: options,\n          isClearable: true,\n          onChange: this.handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          class: \"btn btn-outline-primary\",\n          onClick: this.onClick,\n          disabled: !this.state.selectedOption // onAnimationEnd={() => this.setState({ fade: false })}\n          // className={fade ? 'fade' : ''}\n          ,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        ref: this.ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/daniellesimon/Desktop/Communication-User-Tool/src/components/SkillSearch.js"],"names":["React","Component","Select","d3","options","value","label","SkillSearch","constructor","handleChange","selectedOption","setState","console","log","state","onClick","fade","drawChart","size","chartExists","svg","select","ref","current","append","attr","width","height","margin","top","right","bottom","left","chartWidth","chartHeight","annotations","chartArea","skills","frequency","key","Object","entries","data","push","skillExtent","extent","frequencyExtent","bottomAxis","axisBottom","bottomAxisG","leftAxis","axisLeft","leftAxisG","updateBarsAnimated","yearKey","yearData","genres","map","d","genre","genreScale","scaleBand","domain","range","padding","scale","transition","call","selectAll","join","enter","percentScale","percentpass","bandwidth","update","exit","remove","createRef","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Select from 'react-select';\nimport * as d3 from 'd3';\n\nconst options = [\n    { value: 'automation_engineer', label: 'Automation Engineer' },\n    { value: 'computer_hardware_engineer', label: 'Computer Hardware Engineer' },\n    { value: 'data_analyst', label: 'Data Analyst' },\n    { value: 'data_engineer', label: 'Data Engineer' },\n    { value: 'data_scientist', label: 'Data Scientist' },\n    { value: 'electrical_engineer', label: 'Electrical Engineer' },\n    { value: 'financial_engineer', label: 'Financial Engineer' },\n    { value: 'machine_learning_engineer', label: 'Machine Learning Engineer' },\n    { value: 'mechanical_engineer', label: 'Mechanical Engineer' },\n    { value: 'network_engineer', label: 'Network Engineer' },\n    { value: 'qa_engineer', label: 'QA Engineer' },\n    { value: 'quantitative_analyst', label: 'Quantitative Analyst' },\n    { value: 'quantitative_finance', label: 'Quantitative Finance' },\n    { value: 'quantitative_research', label: 'Quantitative Research' },\n    { value: 'quantitative_trading', label: 'Quantitative Trading' },\n    { value: 'software_engineer', label: 'Software Engineer' },\n    { value: 'systems_engineer', label: 'Systems Engineer' },\n    { value: 'technology_analyst', label: 'Technology Analyst' }\n]\n\nexport default class SkillSearch extends Component {\n    constructor() {\n        super();\n        this.state = {\n            selectedOption: null,\n            chartExists: false,\n            // fade: false\n            data: { \"skill1\": 5, \"skill2\": 8, \"skill3\": 4, \"skill4\": 1, \"skill5\": 9 }\n\n        }\n        this.ref = React.createRef()\n        // this.data = [100, 200, 300, 400, 500]\n    }\n\n    handleChange = (selectedOption) => {\n        this.setState({ selectedOption });\n        console.log(this.state.selectedOption);\n    }\n\n\n    onClick = () => {\n        console.log(this.state.selectedOption);\n        this.setState({ fade: true });\n        this.drawChart();\n    }\n\n    drawChart = () => {\n        // d3.json(this.state.data).then(data => {\n        // this.state.data.then(data => {\n        const size = 400\n        // const svg = d3.select('svg') ? d3.select(this.ref.current) : d3.select(this.ref.current).append('svg')\n        //     .class(\"graph\")\n        //     .attr('width', size).attr('height', size);\n\n        if (this.state.chartExists) {\n            console.log(\"exists\");\n            var svg = d3.select(this.ref.current);\n        }\n        else {\n            console.log(\"does not exist\");\n            var svg = d3.select(this.ref.current)\n                .append('svg')\n                .attr(\"class\", \"graph\")\n                .attr('width', size)\n                .attr('height', size);\n        }\n\n        this.setState({ chartExists: true })\n\n        // const rectWidth = 95\n        // svg.selectAll('rect')\n        //     .data(this.data)\n        //     .enter()\n        //     .append('rect')\n        //     .attr('x', (d, i) => 5 + i * (rectWidth + 5))\n        //     .attr('y', (d) => size - d)\n        //     .attr('width', rectWidth)\n        //     .attr('height', (d) => d)\n        //     .attr('fill', 'tomato')\n\n        // this.state.data.forEach(d => {\n        //     // d['points'] = Number(d['points']);\n        //     // d['price'] = Number(d['price'].replace(/,/g, \"\").replace(/\\$/g, \"\"));\n        //     console.log(d);\n        // });\n\n        const width = svg.attr(\"width\");\n        const height = svg.attr(\"height\");\n\n        const margin = { top: 20, right: 10, bottom: 30, left: 35 };\n        const chartWidth = width - margin.left - margin.right;\n        const chartHeight = height - margin.top - margin.bottom;\n\n        let annotations = svg.append(\"g\").attr(\"id\", \"annotations\");\n        let chartArea = svg.append(\"g\").attr(\"id\", \"chart\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        var skills = []\n        var frequency = []\n        for (const [key, value] of Object.entries(this.state.data)) {\n            skills.push(key);\n            frequency.push(value);\n        }\n        // console.log(occurences)\n        const skillExtent = d3.extent(skills)\n        console.log(skillExtent)\n\n        const frequencyExtent = d3.extent(frequency)\n        console.log(frequencyExtent)\n\n        let bottomAxis = d3.axisBottom()\n        let bottomAxisG = annotations.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", `translate(${margin.left},${chartHeight + margin.top + 10})`)\n\n        let leftAxis = d3.axisLeft()\n        let leftAxisG = annotations.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .attr(\"transform\", `translate(${margin.left - 10},${margin.top})`)\n\n        function updateBarsAnimated(yearKey) {\n\n            const data = yearData[yearKey]\n            console.log(data)\n\n            const genres = d3.map(data, d => d.genre)\n            const genreScale = d3.scaleBand().domain(genres).range([0, chartWidth])\n                .padding(0.05);\n\n            bottomAxis.scale(genreScale)\n            bottomAxisG.transition().call(bottomAxis);\n\n            // Because d3 reuses elements in a greedy fashion by default, there is no guarantee that the \"Action\" bar stays\n            //  the \"Action\" bar during the animated join because d3 may re-assign it to a different genre during update\n            // To make sure d3 re-uses bars, we can give .data() a second parameter that uniquely identifies each data value\n            // d3 will check that value and re-use objects if they share the same identifier\n            // Here we want d3 to keep bars mapped to the same genre if possible, so we add d => d.genre to the data() call\n            chartArea.selectAll('rect.bar').data(data, d => d.genre)\n                .join(enter => enter.append('rect')\n                    .attr('class', 'bar')\n                    .attr(\"fill\", \"steelblue\")\n                    .attr(\"x\", d => genreScale(d.genre))\n                    .attr(\"y\", d => percentScale(d.percentpass))\n                    .attr(\"height\", d => percentScale(0) - percentScale(d.percentpass))\n                    .attr(\"width\", genreScale.bandwidth())\n                    .attr(\"opacity\", 0) // Set opacity low, then animate to 1 to make them fade in\n                    .call(enter => enter.transition().attr('opacity', 1)),\n                    update => update.call(update => update.transition()  // Animate resizing and movement\n                        .attr(\"fill\", \"steelblue\")\n                        .attr(\"x\", d => genreScale(d.genre))\n                        .attr(\"y\", d => percentScale(d.percentpass))\n                        .attr(\"height\", d => percentScale(0) - percentScale(d.percentpass))\n                        .attr(\"width\", genreScale.bandwidth())),\n                    exit => exit.call(exit => exit.transition().attr('opacity', 0).remove())); // Animate opacity to fade out\n        }\n\n        // const frequencyScale = d3.scaleLinear().domain(frequencyExtent).range([chartHeight, 0]);\n        // let leftAxis = d3.axisLeft(frequencyScale).tickFormat(d3.format('.0%'));\n        // let leftGridlines = d3.axisLeft(frequencyScale)\n        //     .tickSize(-chartWidth - 10)\n        //     .tickFormat(\"\")\n        // annotations.append(\"g\")\n        //     .attr(\"class\", \"y axis\")\n        //     .attr(\"transform\", `translate(${margin.left - 10},${margin.top})`)\n        //     .call(leftAxis)\n        // annotations.append(\"g\")\n        //     .attr(\"class\", \"y gridlines\")\n        //     .attr(\"transform\", `translate(${margin.left - 10},${margin.top})`)\n        //     .call(leftGridlines);\n\n\n        // const skillScale = d3.scaleLinear().domain(skillExtent).range([chartHeight, 0]);\n        // let bottomAxis = d3.axisBottom(skillScale).tickFormat(d3.format('.0%'));\n        // let bottomGridlines = d3.axisBottom(skillScale)\n        //     .tickSize(-chartWidth - 10)\n        //     .tickFormat(\"\")\n        // annotations.append(\"g\")\n        //     .attr(\"class\", \"x axis\")\n        //     .attr(\"transform\", `translate(${margin.left},${chartHeight + margin.top + 10})`)\n        //     .call(bottomAxis)\n        // annotations.append(\"g\")\n        //     .attr(\"class\", \"x gridlines\")\n        //     .attr(\"transform\", `translate(${margin.left},${chartHeight + margin.top + 10})`)\n        //     .call(bottomGridlines);\n\n\n\n    }\n\n    render() {\n        // const fade = this.state.fade;\n\n        return (\n            <div className=\"skill-search-container\" >\n                <h1 className=\"title\">Search for jobs you're interested in!</h1>\n                <div className=\"skill-search\">\n                    <Select className=\"searchbar\" options={options} isClearable={true} onChange={this.handleChange} />\n                    <button type=\"button\" class=\"btn btn-outline-primary\" onClick={this.onClick} disabled={!this.state.selectedOption}\n                    // onAnimationEnd={() => this.setState({ fade: false })}\n                    // className={fade ? 'fade' : ''}\n                    >Search</button>\n                </div>\n                <div className=\"chart\" ref={this.ref} />\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}