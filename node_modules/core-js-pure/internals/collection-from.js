'use strict';
// https://tc39.github.io/proposal-setmap-offrom/
<<<<<<< HEAD
var bind = require('../internals/function-bind-context');
var call = require('../internals/function-call');
var aCallable = require('../internals/a-callable');
var aConstructor = require('../internals/a-constructor');
var iterate = require('../internals/iterate');

var push = [].push;

=======
var aFunction = require('../internals/a-function');
var bind = require('../internals/function-bind-context');
var iterate = require('../internals/iterate');

>>>>>>> 39a8ac91c1203e59702c1b86c18a4c5e5058db03
module.exports = function from(source /* , mapFn, thisArg */) {
  var length = arguments.length;
  var mapFn = length > 1 ? arguments[1] : undefined;
  var mapping, array, n, boundFunction;
<<<<<<< HEAD
  aConstructor(this);
  mapping = mapFn !== undefined;
  if (mapping) aCallable(mapFn);
=======
  aFunction(this);
  mapping = mapFn !== undefined;
  if (mapping) aFunction(mapFn);
>>>>>>> 39a8ac91c1203e59702c1b86c18a4c5e5058db03
  if (source == undefined) return new this();
  array = [];
  if (mapping) {
    n = 0;
<<<<<<< HEAD
    boundFunction = bind(mapFn, length > 2 ? arguments[2] : undefined);
    iterate(source, function (nextItem) {
      call(push, array, boundFunction(nextItem, n++));
    });
  } else {
    iterate(source, push, { that: array });
=======
    boundFunction = bind(mapFn, length > 2 ? arguments[2] : undefined, 2);
    iterate(source, function (nextItem) {
      array.push(boundFunction(nextItem, n++));
    });
  } else {
    iterate(source, array.push, { that: array });
>>>>>>> 39a8ac91c1203e59702c1b86c18a4c5e5058db03
  }
  return new this(array);
};
