'use strict';
var $ = require('../internals/export');
<<<<<<< HEAD
var global = require('../internals/global');
var isArray = require('../internals/is-array');
var isConstructor = require('../internals/is-constructor');
var isObject = require('../internals/is-object');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var lengthOfArrayLike = require('../internals/length-of-array-like');
=======
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var toAbsoluteIndex = require('../internals/to-absolute-index');
var toLength = require('../internals/to-length');
>>>>>>> 39a8ac91c1203e59702c1b86c18a4c5e5058db03
var toIndexedObject = require('../internals/to-indexed-object');
var createProperty = require('../internals/create-property');
var wellKnownSymbol = require('../internals/well-known-symbol');
var arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');
<<<<<<< HEAD
var un$Slice = require('../internals/array-slice');
=======
>>>>>>> 39a8ac91c1203e59702c1b86c18a4c5e5058db03

var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('slice');

var SPECIES = wellKnownSymbol('species');
<<<<<<< HEAD
var Array = global.Array;
=======
var nativeSlice = [].slice;
>>>>>>> 39a8ac91c1203e59702c1b86c18a4c5e5058db03
var max = Math.max;

// `Array.prototype.slice` method
// https://tc39.es/ecma262/#sec-array.prototype.slice
// fallback for not array-like ES3 strings and DOM objects
$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {
  slice: function slice(start, end) {
    var O = toIndexedObject(this);
<<<<<<< HEAD
    var length = lengthOfArrayLike(O);
=======
    var length = toLength(O.length);
>>>>>>> 39a8ac91c1203e59702c1b86c18a4c5e5058db03
    var k = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
    var Constructor, result, n;
    if (isArray(O)) {
      Constructor = O.constructor;
      // cross-realm fallback
<<<<<<< HEAD
      if (isConstructor(Constructor) && (Constructor === Array || isArray(Constructor.prototype))) {
=======
      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
>>>>>>> 39a8ac91c1203e59702c1b86c18a4c5e5058db03
        Constructor = undefined;
      } else if (isObject(Constructor)) {
        Constructor = Constructor[SPECIES];
        if (Constructor === null) Constructor = undefined;
      }
      if (Constructor === Array || Constructor === undefined) {
<<<<<<< HEAD
        return un$Slice(O, k, fin);
=======
        return nativeSlice.call(O, k, fin);
>>>>>>> 39a8ac91c1203e59702c1b86c18a4c5e5058db03
      }
    }
    result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));
    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
    result.length = n;
    return result;
  }
});
