{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldBeCircle = exports.rotationTransforms = exports.coinFlip = exports.rotate = exports.mapRange = void 0;\n\nvar isEqual_1 = __importDefault(require(\"lodash/isEqual\"));\n\nexports.mapRange = function (value, x1, y1, x2, y2) {\n  return (value - x1) * (y2 - x2) / (y1 - x1) + x2;\n};\n\nexports.rotate = function (degree, amount) {\n  var result = degree + amount;\n  return result > 360 ? result - 360 : result;\n};\n\nexports.coinFlip = function () {\n  return Math.random() > 0.5;\n}; // avoid this for circles, as it will have no visual effect\n\n\nvar zAxisRotation = [0, 0, 1];\nexports.rotationTransforms = [// dual axis rotations (a bit more realistic)\n[1, 1, 0], [1, 0, 1], [0, 1, 1], // single axis rotations (a bit dumber)\n[1, 0, 0], [0, 1, 0], zAxisRotation];\n\nexports.shouldBeCircle = function (rotationIndex) {\n  return !isEqual_1.default(exports.rotationTransforms[rotationIndex], zAxisRotation) && exports.coinFlip();\n};","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,IAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AAIa,OAAA,CAAA,QAAA,GAAW,UAAC,KAAD,EAAgB,EAAhB,EAA4B,EAA5B,EAAwC,EAAxC,EAAoD,EAApD,EAA8D;AACpF,SAAC,CAAC,KAAK,GAAG,EAAT,KAAgB,EAAE,GAAG,EAArB,CAAD,IAA8B,EAAE,GAAG,EAAnC,IAAyC,EAAzC;AAA2C,CADhC;;AAGA,OAAA,CAAA,MAAA,GAAS,UAAC,MAAD,EAAiB,MAAjB,EAA+B;AACnD,MAAM,MAAM,GAAG,MAAM,GAAG,MAAxB;AACA,SAAO,MAAM,GAAG,GAAT,GAAe,MAAM,GAAG,GAAxB,GAA8B,MAArC;AACD,CAHY;;AAKA,OAAA,CAAA,QAAA,GAAW,YAAA;AAAM,SAAA,IAAI,CAAC,MAAL,KAAA,GAAA;AAAmB,CAApC,C,CAEb;;;AACA,IAAM,aAAa,GAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAzC;AAEa,OAAA,CAAA,kBAAA,GAA0C,CACrD;AACA,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFqD,EAGrD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHqD,EAIrD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJqD,EAKrD;AACA,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANqD,EAOrD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPqD,EAQrD,aARqD,CAA1C;;AAWA,OAAA,CAAA,cAAA,GAAiB,UAAC,aAAD,EAAsB;AAClD,SAAO,CAAC,SAAA,CAAA,OAAA,CAAQ,OAAA,CAAA,kBAAA,CAAmB,aAAnB,CAAR,EAA2C,aAA3C,CAAD,IAA8D,OAAA,CAAA,QAAA,EAArE;AACD,CAFY","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shouldBeCircle = exports.rotationTransforms = exports.coinFlip = exports.rotate = exports.mapRange = void 0;\nvar isEqual_1 = __importDefault(require(\"lodash/isEqual\"));\nexports.mapRange = function (value, x1, y1, x2, y2) {\n    return ((value - x1) * (y2 - x2)) / (y1 - x1) + x2;\n};\nexports.rotate = function (degree, amount) {\n    var result = degree + amount;\n    return result > 360 ? result - 360 : result;\n};\nexports.coinFlip = function () { return Math.random() > 0.5; };\n// avoid this for circles, as it will have no visual effect\nvar zAxisRotation = [0, 0, 1];\nexports.rotationTransforms = [\n    // dual axis rotations (a bit more realistic)\n    [1, 1, 0],\n    [1, 0, 1],\n    [0, 1, 1],\n    // single axis rotations (a bit dumber)\n    [1, 0, 0],\n    [0, 1, 0],\n    zAxisRotation,\n];\nexports.shouldBeCircle = function (rotationIndex) {\n    return !isEqual_1.default(exports.rotationTransforms[rotationIndex], zAxisRotation) && exports.coinFlip();\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}